"""1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе."""

result_list = [-2, 0.01, 0.0, None, 'Strange', 11, .3, None]
for n in result_list:  # Перебор списка
    print("Value: %s; Type: %s" % (n, type(n)))  # выводим значение и тип

"""2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. 
При нечётном количестве элементов последний сохранить на своём месте. 
Для заполнения списка элементов нужно использовать функцию input()."""

print("Введите элементы списка из 11 значений")
result_list = []  # Инициализируем пустой список
for num in range(11):  # пускай введут 11 элементов
    result_list.append(input("Элемент #%d:" % num))  # Просим ввести элемент списка
print(result_list)  # Выведем изначальный список
cur_idx = 0  # начальный индекс
list_len = len(result_list)  # длина списка
while cur_idx < list_len:  # перебор элементов списка попарно, пока не он не закончится
    if list_len > cur_idx + 1:  # Проверим, что это не последний нечетный элемент списка
        current_element = result_list[cur_idx]  # текущий элемент списка
        next_element = result_list[cur_idx + 1]  # следующий элемент
        result_list[cur_idx] = next_element  # следующий идет на место текущего
        result_list[cur_idx + 1] = current_element  # текущий идет на место следующего
    cur_idx += 2  # Переходим к следующей паре значений
print(result_list)

"""3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и dict."""

seasons_schedule = ['winter', 'spring', 'summer', 'autumn']
seasons_dict = {1 : 'winter', 2 : 'spring', 3 : 'summer', 4 : 'autumn'}
month = int(input("Введите месяц по номеру "))
if month ==1 or month == 12 or month == 2:
    print(seasons_dict.get(1))
    print(seasons_schedule[0])
elif month == 3 or month == 4 or month ==5:
    print(seasons_dict.get(2))
    print(seasons_schedule[1])
elif month == 6 or month == 7 or month == 8:
    print(seasons_dict.get(3))
    print(seasons_schedule[2])
elif month == 9 or month == 10 or month == 11:
    print(seasons_dict.get(4))
    print(seasons_schedule[3])
else:
    print("Такого месяца не существует")


"""4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове."""

my_line = input("Введите строку пожалуйста ")
my_word = []  #не понимаю что это за переменная
num = 1
for el in range(my_line.count(' ') + 1):
    my_word = my_line.split()
    if len(str(my_word)) <= 10:
        print(f" {num} {my_word [el]}")
        num += 1
    else:
        print(f" {num} {my_word [el] [0:10]}")
        num += 1

'''5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. 
У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.

Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].'''