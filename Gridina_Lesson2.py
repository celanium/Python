"""1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе."""

result_list = [-2, 0.01, 0.0, None, 'Strange', 11, .3, None]
for n in result_list:  # Перебор списка
    print("Value: %s; Type: %s" % (n, type(n)))  # выводим значение и тип

"""2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. 
При нечётном количестве элементов последний сохранить на своём месте. 
Для заполнения списка элементов нужно использовать функцию input()."""

print("Введите элементы списка из 11 значений")
result_list = []  # Инициализируем пустой список
for num in range(11):  # пускай введут 11 элементов
    result_list.append(input("Элемент #%d:" % num))  # Просим ввести элемент списка
print(result_list)  # Выведем изначальный список
cur_idx = 0  # начальный индекс
list_len = len(result_list)  # длина списка
while cur_idx < list_len:  # перебор элементов списка попарно, пока не он не закончится
    if list_len > cur_idx + 1:  # Проверим, что это не последний нечетный элемент списка
        current_element = result_list[cur_idx]  # текущий элемент списка
        next_element = result_list[cur_idx + 1]  # следующий элемент
        result_list[cur_idx] = next_element  # следующий идет на место текущего
        result_list[cur_idx + 1] = current_element  # текущий идет на место следующего
    cur_idx += 2  # Переходим к следующей паре значений
print(result_list)

"""3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить, к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и dict."""
#  Через список
winter_list = [12, 1, 2]
spring_list = [3, 4, 5]
summer_list = [6, 7, 8]
fall_list = [9, 10, 11]
month = int(input("Введите месяц по номеру "))
if winter_list.count(month) > 0:
    print('Зима')
elif spring_list.count(month) > 0:
    print('Весна')
elif summer_list.count(month) > 0:
    print('Лето')
elif fall_list.count(month) > 0:
    print('Осень')
else:
    print("Такого месяца не существует")

# Через словарь
seasons_by_month_dictionary = {1: 'Зима', 2: 'Зима', 3: 'Весна', 4: 'Весна',
                               5: 'Весна', 6: 'Лето', 7: 'Лето', 8: 'Лето',
                               9: 'Осень', 10: 'Осень', 11: 'Осень', 12: 'Зима'}
month = int(input("Введите месяц по номеру "))
time_of_year = seasons_by_month_dictionary.get(month)
if time_of_year is None:
    print("Такого месяца не существует")
else:
    print(time_of_year)


"""4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове."""

my_line = input("Введите строку пожалуйста ")
my_word = []
num = 1
for el in range(my_line.count(' ') + 1):
    my_word = my_line.split()
    if len(str(my_word)) <= 10:
        print(f" {num} {my_word[el]}")
        num += 1
    else:
        print(f" {num} {my_word[el][0:10]}")
        num += 1

'''5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. 
У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.

Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].'''

my_schedule = [7, 5, 3, 3, 2]
print(f"Рейтинг - {my_schedule}")
digit = int(input("Введите число (333 - выход из программы) "))
while digit != 333:
    for el in range(len(my_schedule)):
        if my_schedule[el] == digit:
            my_schedule.insert(el + 1, digit)
            break
        elif my_schedule[0] < digit:
            my_schedule.insert(0, digit)
        elif my_schedule[-1] > digit:
            my_schedule.append(digit)
        elif my_schedule[el] > digit and my_schedule[el + 1] < digit:
            my_schedule.insert(el + 1, digit)
    print(f"текущий список - {my_schedule}")
    digit = int(input("Введите число "))
